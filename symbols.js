// symbol index generated by DDOX - do not edit
var symbols = [
{name: 'std.experimental.xml.appender', kind: "module", path: './std/experimental/xml/appender.html', attributes: []},
{name: 'std.experimental.xml.appender.Appender', kind: "structdeclaration", path: './std/experimental/xml/appender/Appender.html', attributes: []},
{name: 'std.experimental.xml.appender.Appender.capacity', kind: "functiondeclaration", path: './std/experimental/xml/appender/Appender.capacity.html', attributes: ["const", "property"]},
{name: 'std.experimental.xml.appender.Appender.clear', kind: "functiondeclaration", path: './std/experimental/xml/appender/Appender.clear.html', attributes: ["pure", "nothrow"]},
{name: 'std.experimental.xml.appender.Appender.data', kind: "functiondeclaration", path: './std/experimental/xml/appender/Appender.data.html', attributes: ["inout", "property", "trusted"]},
{name: 'std.experimental.xml.appender.Appender.reserve', kind: "functiondeclaration", path: './std/experimental/xml/appender/Appender.reserve.html', attributes: []},
{name: 'std.experimental.xml.appender.Appender.shrinkTo', kind: "functiondeclaration", path: './std/experimental/xml/appender/Appender.shrinkTo.html', attributes: ["pure", "nothrow"]},
{name: 'std.experimental.xml.cursor', kind: "module", path: './std/experimental/xml/cursor.html', attributes: []},
{name: 'std.experimental.xml.cursor.children', kind: "functiondeclaration", path: './std/experimental/xml/cursor/children.html', attributes: ["auto"]},
{name: 'std.experimental.xml.cursor.CopyingCursor', kind: "structdeclaration", path: './std/experimental/xml/cursor/CopyingCursor.html', attributes: []},
{name: 'std.experimental.xml.cursor.copyingCursor', kind: "functiondeclaration", path: './std/experimental/xml/cursor/copyingCursor.html', attributes: ["auto"]},
{name: 'std.experimental.xml.cursor.Cursor', kind: "structdeclaration", path: './std/experimental/xml/cursor/Cursor.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.atBeginning', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.atBeginning.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/cursor/Cursor.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.documentEnd', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.documentEnd.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.enter', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.enter.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.exit', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.exit.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.getAll', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getAll.html', attributes: ["const"]},
{name: 'std.experimental.xml.cursor.Cursor.getAttributes', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getAttributes.html', attributes: ["auto"]},
{name: 'std.experimental.xml.cursor.Cursor.getContent', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getContent.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.getKind', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getKind.html', attributes: ["const"]},
{name: 'std.experimental.xml.cursor.Cursor.getLocalName', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getLocalName.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.getName', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getName.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.getPrefix', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.getPrefix.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/cursor/Cursor.InputType.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.next', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.next.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.setErrorHandler', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.setErrorHandler.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.setSource', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.setSource.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.StringType', kind: "aliasdeclaration", path: './std/experimental/xml/cursor/Cursor.StringType.html', attributes: []},
{name: 'std.experimental.xml.cursor.Cursor.this', kind: "functiondeclaration", path: './std/experimental/xml/cursor/Cursor.this.html', attributes: []},
{name: 'std.experimental.xml.cursor.cursor', kind: "templatedeclaration", path: './std/experimental/xml/cursor/cursor.html', attributes: []},
{name: 'std.experimental.xml.cursor.cursor.cursor', kind: "functiondeclaration", path: './std/experimental/xml/cursor/cursor.cursor.html', attributes: ["auto"]},
{name: 'std.experimental.xml.cursor.CursorError', kind: "enumdeclaration", path: './std/experimental/xml/cursor/CursorError.html', attributes: []},
{name: 'std.experimental.xml.cursor.CursorError.INVALID_ATTRIBUTE_SYNTAX', kind: "enummemberdeclaration", path: './std/experimental/xml/cursor/CursorError.INVALID_ATTRIBUTE_SYNTAX.html', attributes: []},
{name: 'std.experimental.xml.cursor.CursorError.MISSING_XML_DECLARATION', kind: "enummemberdeclaration", path: './std/experimental/xml/cursor/CursorError.MISSING_XML_DECLARATION.html', attributes: []},
{name: 'std.experimental.xml.dom', kind: "module", path: './std/experimental/xml/dom.html', attributes: []},
{name: 'std.experimental.xml.dom.Attr', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Attr.html', attributes: []},
{name: 'std.experimental.xml.dom.Attr.isId', kind: "functiondeclaration", path: './std/experimental/xml/dom/Attr.isId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Attr.name', kind: "functiondeclaration", path: './std/experimental/xml/dom/Attr.name.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Attr.ownerElement', kind: "functiondeclaration", path: './std/experimental/xml/dom/Attr.ownerElement.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Attr.schemaTypeInfo', kind: "functiondeclaration", path: './std/experimental/xml/dom/Attr.schemaTypeInfo.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Attr.specified', kind: "functiondeclaration", path: './std/experimental/xml/dom/Attr.specified.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Attr.value', kind: "functiondeclaration", path: './std/experimental/xml/dom/Attr.value.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.CDATASection', kind: "interfacedeclaration", path: './std/experimental/xml/dom/CDATASection.html', attributes: []},
{name: 'std.experimental.xml.dom.CharacterData', kind: "interfacedeclaration", path: './std/experimental/xml/dom/CharacterData.html', attributes: []},
{name: 'std.experimental.xml.dom.CharacterData.appendData', kind: "functiondeclaration", path: './std/experimental/xml/dom/CharacterData.appendData.html', attributes: []},
{name: 'std.experimental.xml.dom.CharacterData.deleteData', kind: "functiondeclaration", path: './std/experimental/xml/dom/CharacterData.deleteData.html', attributes: []},
{name: 'std.experimental.xml.dom.CharacterData.insertData', kind: "functiondeclaration", path: './std/experimental/xml/dom/CharacterData.insertData.html', attributes: []},
{name: 'std.experimental.xml.dom.CharacterData.replaceData', kind: "functiondeclaration", path: './std/experimental/xml/dom/CharacterData.replaceData.html', attributes: []},
{name: 'std.experimental.xml.dom.CharacterData.substringData', kind: "functiondeclaration", path: './std/experimental/xml/dom/CharacterData.substringData.html', attributes: []},
{name: 'std.experimental.xml.dom.Comment', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Comment.html', attributes: []},
{name: 'std.experimental.xml.dom.Document', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Document.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createAttribute', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createAttribute.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createAttributeNS', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createAttributeNS.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createCDATASection', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createCDATASection.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createComment', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createComment.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createDocumentFragment', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createDocumentFragment.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createElement', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createElement.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createElementNS', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createElementNS.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createEntityReference', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createEntityReference.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createProcessingInstruction', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createProcessingInstruction.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.createTextNode', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.createTextNode.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.doctype', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.doctype.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.documentElement', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.documentElement.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.documentURI', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.documentURI.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.domConfig', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.domConfig.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.getElementById', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.getElementById.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.getElementsByTagName', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.getElementsByTagName.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.getElementsByTagNameNS', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.getElementsByTagNameNS.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.implementation', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.implementation.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.importNode', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.importNode.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.inputEncoding', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.inputEncoding.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.normalizeDocument', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.normalizeDocument.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.renameNode', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.renameNode.html', attributes: []},
{name: 'std.experimental.xml.dom.Document.strictErrorChecking', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.strictErrorChecking.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.xmlEncoding', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.xmlEncoding.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.xmlStandalone', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.xmlStandalone.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Document.xmlVersion', kind: "functiondeclaration", path: './std/experimental/xml/dom/Document.xmlVersion.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DocumentFragment', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DocumentFragment.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition', kind: "enumdeclaration", path: './std/experimental/xml/dom/DocumentPosition.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.CONTAINED_BY', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.CONTAINED_BY.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.CONTAINS', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.CONTAINS.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.DISCONNECTED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.DISCONNECTED.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.FOLLOWING', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.FOLLOWING.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.IMPLEMENTATION_SPECIFIC', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.IMPLEMENTATION_SPECIFIC.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.NONE', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.NONE.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentPosition.PRECEDING', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/DocumentPosition.PRECEDING.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentType', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DocumentType.html', attributes: []},
{name: 'std.experimental.xml.dom.DocumentType.entities', kind: "functiondeclaration", path: './std/experimental/xml/dom/DocumentType.entities.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DocumentType.internalSubset', kind: "functiondeclaration", path: './std/experimental/xml/dom/DocumentType.internalSubset.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DocumentType.name', kind: "functiondeclaration", path: './std/experimental/xml/dom/DocumentType.name.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DocumentType.notations', kind: "functiondeclaration", path: './std/experimental/xml/dom/DocumentType.notations.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DocumentType.publicId', kind: "functiondeclaration", path: './std/experimental/xml/dom/DocumentType.publicId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DocumentType.systemId', kind: "functiondeclaration", path: './std/experimental/xml/dom/DocumentType.systemId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DOMConfiguration', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMConfiguration.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMError', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMError.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMException', kind: "classdeclaration", path: './std/experimental/xml/dom/DOMException.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMException.code', kind: "functiondeclaration", path: './std/experimental/xml/dom/DOMException.code.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.DOMException.this', kind: "functiondeclaration", path: './std/experimental/xml/dom/DOMException.this.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'std.experimental.xml.dom.DOMImplementation', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMImplementation.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMImplementation.createDocument', kind: "functiondeclaration", path: './std/experimental/xml/dom/DOMImplementation.createDocument.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMImplementation.createDocumentType', kind: "functiondeclaration", path: './std/experimental/xml/dom/DOMImplementation.createDocumentType.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMImplementationList', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMImplementationList.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMImplementationSource', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMImplementationSource.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMImplementationSource.getDOMImplementation', kind: "functiondeclaration", path: './std/experimental/xml/dom/DOMImplementationSource.getDOMImplementation.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMImplementationSource.getDOMImplementationList', kind: "functiondeclaration", path: './std/experimental/xml/dom/DOMImplementationSource.getDOMImplementationList.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMLocator', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMLocator.html', attributes: []},
{name: 'std.experimental.xml.dom.DOMStringList', kind: "interfacedeclaration", path: './std/experimental/xml/dom/DOMStringList.html', attributes: []},
{name: 'std.experimental.xml.dom.Entity', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Entity.html', attributes: []},
{name: 'std.experimental.xml.dom.Entity.inputEncoding', kind: "functiondeclaration", path: './std/experimental/xml/dom/Entity.inputEncoding.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Entity.notationName', kind: "functiondeclaration", path: './std/experimental/xml/dom/Entity.notationName.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Entity.publicId', kind: "functiondeclaration", path: './std/experimental/xml/dom/Entity.publicId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Entity.systemId', kind: "functiondeclaration", path: './std/experimental/xml/dom/Entity.systemId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Entity.xmlEncoding', kind: "functiondeclaration", path: './std/experimental/xml/dom/Entity.xmlEncoding.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Entity.xmlVersion', kind: "functiondeclaration", path: './std/experimental/xml/dom/Entity.xmlVersion.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.EntityReference', kind: "interfacedeclaration", path: './std/experimental/xml/dom/EntityReference.html', attributes: []},
{name: 'std.experimental.xml.dom.ErrorSeverity', kind: "enumdeclaration", path: './std/experimental/xml/dom/ErrorSeverity.html', attributes: []},
{name: 'std.experimental.xml.dom.ErrorSeverity.ERROR', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ErrorSeverity.ERROR.html', attributes: []},
{name: 'std.experimental.xml.dom.ErrorSeverity.FATAL_ERROR', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ErrorSeverity.FATAL_ERROR.html', attributes: []},
{name: 'std.experimental.xml.dom.ErrorSeverity.WARNING', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ErrorSeverity.WARNING.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode', kind: "enumdeclaration", path: './std/experimental/xml/dom/ExceptionCode.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.DOMSTRING_SIZE', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.DOMSTRING_SIZE.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.HIERARCHY_REQUEST', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.HIERARCHY_REQUEST.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.INDEX_SIZE', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.INDEX_SIZE.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.INUSE_ATTRIBUTE', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.INUSE_ATTRIBUTE.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.INVALID_ACCESS', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.INVALID_ACCESS.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.INVALID_CHARACTER', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.INVALID_CHARACTER.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.INVALID_MODIFICATION', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.INVALID_MODIFICATION.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.INVALID_STATE', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.INVALID_STATE.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.NAMESPACE', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.NAMESPACE.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.NOT_FOUND', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.NOT_FOUND.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.NOT_SUPPORTED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.NOT_SUPPORTED.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.NO_DATA_ALLOWED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.NO_DATA_ALLOWED.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.NO_MODIFICATION_ALLOWED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.NO_MODIFICATION_ALLOWED.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.SYNTAX', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.SYNTAX.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.TYPE_MISMATCH', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.TYPE_MISMATCH.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.VALIDATION', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.VALIDATION.html', attributes: []},
{name: 'std.experimental.xml.dom.ExceptionCode.WRONG_DOCUMENT', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/ExceptionCode.WRONG_DOCUMENT.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap', kind: "interfacedeclaration", path: './std/experimental/xml/dom/NamedNodeMap.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.getNamedItem', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.getNamedItem.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.getNamedItemNS', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.getNamedItemNS.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.item', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.item.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.length', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.length.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.NamedNodeMap.removeNamedItem', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.removeNamedItem.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.removeNamedItemNS', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.removeNamedItemNS.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.setNamedItem', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.setNamedItem.html', attributes: []},
{name: 'std.experimental.xml.dom.NamedNodeMap.setNamedItemNS', kind: "functiondeclaration", path: './std/experimental/xml/dom/NamedNodeMap.setNamedItemNS.html', attributes: []},
{name: 'std.experimental.xml.dom.Node', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Node.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.attributes', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.attributes.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.baseURI', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.baseURI.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.childNodes', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.childNodes.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.cloneNode', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.cloneNode.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.compareDocumentPosition', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.compareDocumentPosition.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.firstChild', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.firstChild.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.getUserData', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.getUserData.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.hasAttributes', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.hasAttributes.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.hasChildNodes', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.hasChildNodes.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.insertBefore', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.insertBefore.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.isDefaultNamespace', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.isDefaultNamespace.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.isSupported', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.isSupported.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.lastChild', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.lastChild.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.localName', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.localName.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.lookupNamespaceURI', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.lookupNamespaceURI.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.lookupPrefix', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.lookupPrefix.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.namespaceURI', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.namespaceURI.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.nextSibling', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.nextSibling.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.nodeName', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.nodeName.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.nodeType', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.nodeType.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.nodeValue', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.nodeValue.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.normalize', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.normalize.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.ownerDocument', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.ownerDocument.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.parentNode', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.parentNode.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.prefix', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.prefix.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.previousSibling', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.previousSibling.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Node.removeChild', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.removeChild.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.replaceChild', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.replaceChild.html', attributes: []},
{name: 'std.experimental.xml.dom.Node.setUserData', kind: "functiondeclaration", path: './std/experimental/xml/dom/Node.setUserData.html', attributes: []},
{name: 'std.experimental.xml.dom.NodeList', kind: "interfacedeclaration", path: './std/experimental/xml/dom/NodeList.html', attributes: []},
{name: 'std.experimental.xml.dom.NodeList.item', kind: "functiondeclaration", path: './std/experimental/xml/dom/NodeList.item.html', attributes: []},
{name: 'std.experimental.xml.dom.NodeList.length', kind: "functiondeclaration", path: './std/experimental/xml/dom/NodeList.length.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.NodeType', kind: "enumdeclaration", path: './std/experimental/xml/dom/NodeType.html', attributes: []},
{name: 'std.experimental.xml.dom.Notation', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Notation.html', attributes: []},
{name: 'std.experimental.xml.dom.Notation.publicId', kind: "functiondeclaration", path: './std/experimental/xml/dom/Notation.publicId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Notation.systemId', kind: "functiondeclaration", path: './std/experimental/xml/dom/Notation.systemId.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.ProcessingInstruction', kind: "interfacedeclaration", path: './std/experimental/xml/dom/ProcessingInstruction.html', attributes: []},
{name: 'std.experimental.xml.dom.ProcessingInstruction.data', kind: "functiondeclaration", path: './std/experimental/xml/dom/ProcessingInstruction.data.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.ProcessingInstruction.target', kind: "functiondeclaration", path: './std/experimental/xml/dom/ProcessingInstruction.target.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Text', kind: "interfacedeclaration", path: './std/experimental/xml/dom/Text.html', attributes: []},
{name: 'std.experimental.xml.dom.Text.isElementContentWhitespace', kind: "functiondeclaration", path: './std/experimental/xml/dom/Text.isElementContentWhitespace.html', attributes: ["property"]},
{name: 'std.experimental.xml.dom.Text.splitText', kind: "functiondeclaration", path: './std/experimental/xml/dom/Text.splitText.html', attributes: []},
{name: 'std.experimental.xml.dom.UserData', kind: "aliasdeclaration", path: './std/experimental/xml/dom/UserData.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataHandler', kind: "aliasdeclaration", path: './std/experimental/xml/dom/UserDataHandler.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataOperation', kind: "enumdeclaration", path: './std/experimental/xml/dom/UserDataOperation.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataOperation.NODE_ADOPTED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/UserDataOperation.NODE_ADOPTED.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataOperation.NODE_CLONED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/UserDataOperation.NODE_CLONED.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataOperation.NODE_DELETED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/UserDataOperation.NODE_DELETED.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataOperation.NODE_IMPORTED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/UserDataOperation.NODE_IMPORTED.html', attributes: []},
{name: 'std.experimental.xml.dom.UserDataOperation.NODE_RENAMED', kind: "enummemberdeclaration", path: './std/experimental/xml/dom/UserDataOperation.NODE_RENAMED.html', attributes: []},
{name: 'std.experimental.xml.dom.XMLTypeInfo', kind: "interfacedeclaration", path: './std/experimental/xml/dom/XMLTypeInfo.html', attributes: []},
{name: 'std.experimental.xml.domimpl', kind: "module", path: './std/experimental/xml/domimpl.html', attributes: []},
{name: 'std.experimental.xml.domimpl.domBuilder', kind: "functiondeclaration", path: './std/experimental/xml/domimpl/domBuilder.html', attributes: ["auto"]},
{name: 'std.experimental.xml.domimpl.DOMImplementation', kind: "classdeclaration", path: './std/experimental/xml/domimpl/DOMImplementation.html', attributes: []},
{name: 'std.experimental.xml.domparser', kind: "module", path: './std/experimental/xml/domparser.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder', kind: "structdeclaration", path: './std/experimental/xml/domparser/DOMBuilder.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.build', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.build.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.buildRecursive', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.buildRecursive.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.cursor', kind: "variabledeclaration", path: './std/experimental/xml/domparser/DOMBuilder.cursor.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.enter', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.enter.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.exit', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.exit.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.getDocument', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.getDocument.html', attributes: ["auto"]},
{name: 'std.experimental.xml.domparser.DOMBuilder.next', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.next.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.setSource', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.setSource.html', attributes: []},
{name: 'std.experimental.xml.domparser.domBuilder', kind: "functiondeclaration", path: './std/experimental/xml/domparser/domBuilder.html', attributes: ["auto"]},
{name: 'std.experimental.xml.dtd', kind: "module", path: './std/experimental/xml/dtd.html', attributes: []},
{name: 'std.experimental.xml.faststrings', kind: "module", path: './std/experimental/xml/faststrings.html', attributes: []},
{name: 'std.experimental.xml.faststrings.fastEqual', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/fastEqual.html', attributes: ["pure", "nothrow", "nogc"]},
{name: 'std.experimental.xml.faststrings.xmlEscape', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/xmlEscape.html', attributes: []},
{name: 'std.experimental.xml.faststrings.xmlEscapedWrite', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/xmlEscapedWrite.html', attributes: []},
{name: 'std.experimental.xml.faststrings.xmlUnescape', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/xmlUnescape.html', attributes: []},
{name: 'std.experimental.xml.faststrings.xmlUnescapedWrite', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/xmlUnescapedWrite.html', attributes: []},
{name: 'std.experimental.xml.interfaces', kind: "module", path: './std/experimental/xml/interfaces.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isCursor', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isCursor.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isLexer', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isLexer.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isLowLevelParser', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isLowLevelParser.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isSaveableCursor', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isSaveableCursor.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isSaveableLexer', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isSaveableLexer.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isSaveableLowLevelParser', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isSaveableLowLevelParser.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind', kind: "enumdeclaration", path: './std/experimental/xml/interfaces/XMLKind.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ATTLIST_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ATTLIST_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.CDATA', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.CDATA.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.COMMENT', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.COMMENT.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.CONDITIONAL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.CONDITIONAL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DECLARATION', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DECLARATION.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DOCUMENT', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DOCUMENT.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DTD_EMPTY', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DTD_EMPTY.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DTD_END', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DTD_END.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DTD_START', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DTD_START.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_EMPTY', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_EMPTY.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_END', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_END.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_START', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_START.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ENTITY_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ENTITY_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.NOTATION_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.NOTATION_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.PROCESSING_INSTRUCTION', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.PROCESSING_INSTRUCTION.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.TEXT', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.TEXT.html', attributes: []},
{name: 'std.experimental.xml.legacy', kind: "module", path: './std/experimental/xml/legacy.html', attributes: []},
{name: 'std.experimental.xml.lexers', kind: "module", path: './std/experimental/xml/lexers.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/BufferedLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/BufferedLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.empty.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.get.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.BufferedLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/BufferedLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.setSource', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.setSource.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.lexers.chooseLexer', kind: "functiondeclaration", path: './std/experimental/xml/lexers/chooseLexer.html', attributes: ["auto"]},
{name: 'std.experimental.xml.lexers.ForwardLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/ForwardLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/ForwardLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.empty.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.ForwardLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.get.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/ForwardLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/RangeLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/RangeLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.empty.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.RangeLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.get.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.RangeLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/RangeLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/SliceLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/SliceLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.empty.html', attributes: ["const", "auto"]},
{name: 'std.experimental.xml.lexers.SliceLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.get.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.SliceLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/SliceLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.setSource', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.setSource.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.parser', kind: "module", path: './std/experimental/xml/parser.html', attributes: []},
{name: 'std.experimental.xml.parser.chooseParser', kind: "functiondeclaration", path: './std/experimental/xml/parser/chooseParser.html', attributes: ["auto"]},
{name: 'std.experimental.xml.parser.parse', kind: "functiondeclaration", path: './std/experimental/xml/parser/parse.html', attributes: ["auto"]},
{name: 'std.experimental.xml.parser.Parser', kind: "structdeclaration", path: './std/experimental/xml/parser/Parser.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.empty', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.empty.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.front', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.front.html', attributes: ["auto"]},
{name: 'std.experimental.xml.parser.Parser.popFront', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.popFront.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.setSource', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.setSource.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.this', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.this.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.XMLToken', kind: "structdeclaration", path: './std/experimental/xml/parser/Parser.XMLToken.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.XMLToken.content', kind: "variabledeclaration", path: './std/experimental/xml/parser/Parser.XMLToken.content.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.XMLToken.kind', kind: "variabledeclaration", path: './std/experimental/xml/parser/Parser.XMLToken.kind.html', attributes: []},
{name: 'std.experimental.xml.sax', kind: "module", path: './std/experimental/xml/sax.html', attributes: []},
{name: 'std.experimental.xml.sax.SAXParser', kind: "structdeclaration", path: './std/experimental/xml/sax/SAXParser.html', attributes: []},
{name: 'std.experimental.xml.sax.SAXParser.processDocument', kind: "functiondeclaration", path: './std/experimental/xml/sax/SAXParser.processDocument.html', attributes: []},
{name: 'std.experimental.xml.sax.SAXParser.setSource', kind: "functiondeclaration", path: './std/experimental/xml/sax/SAXParser.setSource.html', attributes: []},
{name: 'std.experimental.xml.sax.saxParser', kind: "functiondeclaration", path: './std/experimental/xml/sax/saxParser.html', attributes: ["auto"]},
{name: 'std.experimental.xml.validation', kind: "module", path: './std/experimental/xml/validation.html', attributes: []},
{name: 'std.experimental.xml.validation.CheckXMLNames', kind: "structdeclaration", path: './std/experimental/xml/validation/CheckXMLNames.html', attributes: []},
{name: 'std.experimental.xml.validation.checkXMLNames', kind: "functiondeclaration", path: './std/experimental/xml/validation/checkXMLNames.html', attributes: ["auto"]},
{name: 'std.experimental.xml.validation.ElementNestingValidator', kind: "structdeclaration", path: './std/experimental/xml/validation/ElementNestingValidator.html', attributes: []},
{name: 'std.experimental.xml.validation.elementNestingValidator', kind: "functiondeclaration", path: './std/experimental/xml/validation/elementNestingValidator.html', attributes: ["auto"]},
{name: 'std.experimental.xml.validation.isValidXMLCharacter10', kind: "functiondeclaration", path: './std/experimental/xml/validation/isValidXMLCharacter10.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'std.experimental.xml.validation.isValidXMLCharacter11', kind: "functiondeclaration", path: './std/experimental/xml/validation/isValidXMLCharacter11.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'std.experimental.xml.validation.isValidXMLNameChar', kind: "functiondeclaration", path: './std/experimental/xml/validation/isValidXMLNameChar.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'std.experimental.xml.validation.isValidXMLNameStart', kind: "functiondeclaration", path: './std/experimental/xml/validation/isValidXMLNameStart.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'std.experimental.xml.validation.isValidXMLPublicIdCharacter', kind: "functiondeclaration", path: './std/experimental/xml/validation/isValidXMLPublicIdCharacter.html', attributes: ["pure", "nothrow", "nogc", "safe"]},
{name: 'std.experimental.xml.writer', kind: "module", path: './std/experimental/xml/writer.html', attributes: []},
{name: 'std.experimental.xml.writer.CheckedWriter', kind: "structdeclaration", path: './std/experimental/xml/writer/CheckedWriter.html', attributes: []},
{name: 'std.experimental.xml.writer.PrettyPrinters', kind: "structdeclaration", path: './std/experimental/xml/writer/PrettyPrinters.html', attributes: []},
{name: 'std.experimental.xml.writer.PrettyPrinters.Indenter', kind: "structdeclaration", path: './std/experimental/xml/writer/PrettyPrinters.Indenter.html', attributes: []},
{name: 'std.experimental.xml.writer.PrettyPrinters.Minimalizer', kind: "structdeclaration", path: './std/experimental/xml/writer/PrettyPrinters.Minimalizer.html', attributes: []},
{name: 'std.experimental.xml.writer.withValidation', kind: "templatedeclaration", path: './std/experimental/xml/writer/withValidation.html', attributes: []},
{name: 'std.experimental.xml.writer.withValidation.withValidation', kind: "functiondeclaration", path: './std/experimental/xml/writer/withValidation.withValidation.html', attributes: ["auto"]},
{name: 'std.experimental.xml.writer.writeCursor', kind: "functiondeclaration", path: './std/experimental/xml/writer/writeCursor.html', attributes: ["auto"]},
{name: 'std.experimental.xml.writer.writeDOM', kind: "functiondeclaration", path: './std/experimental/xml/writer/writeDOM.html', attributes: []},
{name: 'std.experimental.xml.writer.Writer', kind: "structdeclaration", path: './std/experimental/xml/writer/Writer.html', attributes: []},
{name: 'std.experimental.xml.writer.Writer.writeCDATA', kind: "functiondeclaration", path: './std/experimental/xml/writer/Writer.writeCDATA.html', attributes: []},
{name: 'std.experimental.xml.writer.Writer.writeComment', kind: "functiondeclaration", path: './std/experimental/xml/writer/Writer.writeComment.html', attributes: []},
{name: 'std.experimental.xml.writer.Writer.writeProcessingInstruction', kind: "functiondeclaration", path: './std/experimental/xml/writer/Writer.writeProcessingInstruction.html', attributes: []},
{name: 'std.experimental.xml.writer.Writer.writeText', kind: "functiondeclaration", path: './std/experimental/xml/writer/Writer.writeText.html', attributes: []},
{name: 'std.experimental.xml.writer.Writer.writeXMLDeclaration', kind: "functiondeclaration", path: './std/experimental/xml/writer/Writer.writeXMLDeclaration.html', attributes: []},
{name: 'std.experimental.xml.writer.writerFor', kind: "functiondeclaration", path: './std/experimental/xml/writer/writerFor.html', attributes: ["auto"]},
{name: 'std.experimental.xml', kind: "module", path: './std/experimental/xml.html', attributes: []},
];
