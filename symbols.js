// symbol index generated by DDOX - do not edit
var symbols = [
{name: 'std.experimental.xml.cursor', kind: "module", path: './std/experimental/xml/cursor.html', attributes: []},
{name: 'std.experimental.xml.cursor.CursorError', kind: "enumdeclaration", path: './std/experimental/xml/cursor/CursorError.html', attributes: []},
{name: 'std.experimental.xml.dom', kind: "module", path: './std/experimental/xml/dom.html', attributes: []},
{name: 'std.experimental.xml.domimpl', kind: "module", path: './std/experimental/xml/domimpl.html', attributes: []},
{name: 'std.experimental.xml.domparser', kind: "module", path: './std/experimental/xml/domparser.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder', kind: "structdeclaration", path: './std/experimental/xml/domparser/DOMBuilder.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.cursor', kind: "variabledeclaration", path: './std/experimental/xml/domparser/DOMBuilder.cursor.html', attributes: []},
{name: 'std.experimental.xml.domparser.DOMBuilder.this', kind: "functiondeclaration", path: './std/experimental/xml/domparser/DOMBuilder.this.html', attributes: []},
{name: 'std.experimental.xml.faststrings', kind: "module", path: './std/experimental/xml/faststrings.html', attributes: []},
{name: 'std.experimental.xml.faststrings.fastEqual', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/fastEqual.html', attributes: ["pure", "nothrow", "nogc"]},
{name: 'std.experimental.xml.faststrings.fastIndexOf', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/fastIndexOf.html', attributes: ["pure", "nothrow", "nogc"]},
{name: 'std.experimental.xml.faststrings.fastIndexOfAny', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/fastIndexOfAny.html', attributes: ["pure", "nothrow", "nogc"]},
{name: 'std.experimental.xml.faststrings.fastIndexOfNeither', kind: "functiondeclaration", path: './std/experimental/xml/faststrings/fastIndexOfNeither.html', attributes: ["pure", "nothrow", "nogc"]},
{name: 'std.experimental.xml.interfaces', kind: "module", path: './std/experimental/xml/interfaces.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isCursor', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isCursor.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isLexer', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isLexer.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isLowLevelParser', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isLowLevelParser.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isSaveableCursor', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isSaveableCursor.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isSaveableLexer', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isSaveableLexer.html', attributes: []},
{name: 'std.experimental.xml.interfaces.isSaveableLowLevelParser', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/isSaveableLowLevelParser.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind', kind: "enumdeclaration", path: './std/experimental/xml/interfaces/XMLKind.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ATTLIST_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ATTLIST_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.CDATA', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.CDATA.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.COMMENT', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.COMMENT.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.CONDITIONAL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.CONDITIONAL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DECLARATION', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DECLARATION.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DOCTYPE', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DOCTYPE.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.DOCUMENT', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.DOCUMENT.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_EMPTY', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_EMPTY.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_END', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_END.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ELEMENT_START', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ELEMENT_START.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.ENTITY_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.ENTITY_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.NOTATION_DECL', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.NOTATION_DECL.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.PROCESSING_INSTRUCTION', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.PROCESSING_INSTRUCTION.html', attributes: []},
{name: 'std.experimental.xml.interfaces.XMLKind.TEXT', kind: "enummemberdeclaration", path: './std/experimental/xml/interfaces/XMLKind.TEXT.html', attributes: []},
{name: 'std.experimental.xml.legacy', kind: "module", path: './std/experimental/xml/legacy.html', attributes: []},
{name: 'std.experimental.xml.lexers', kind: "module", path: './std/experimental/xml/lexers.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/BufferedLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/BufferedLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.empty.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.get.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.BufferedLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/BufferedLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.setSource', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.setSource.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.lexers.BufferedLexer.this', kind: "functiondeclaration", path: './std/experimental/xml/lexers/BufferedLexer.this.html', attributes: []},
{name: 'std.experimental.xml.lexers.chooseLexer', kind: "functiondeclaration", path: './std/experimental/xml/lexers/chooseLexer.html', attributes: ["auto"]},
{name: 'std.experimental.xml.lexers.ForwardLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/ForwardLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/ForwardLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.empty.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.ForwardLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.get.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/ForwardLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.lexers.ForwardLexer.this', kind: "functiondeclaration", path: './std/experimental/xml/lexers/ForwardLexer.this.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/RangeLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.advanceUntil.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.advanceUntilAny.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/RangeLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.dropWhile.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.empty.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.RangeLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.get.html', attributes: ["const"]},
{name: 'std.experimental.xml.lexers.RangeLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/RangeLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.start.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.testAndAdvance.html', attributes: []},
{name: 'std.experimental.xml.lexers.RangeLexer.this', kind: "functiondeclaration", path: './std/experimental/xml/lexers/RangeLexer.this.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer', kind: "structdeclaration", path: './std/experimental/xml/lexers/SliceLexer.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.advanceUntil', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.advanceUntil.html', attributes: ["nogc"]},
{name: 'std.experimental.xml.lexers.SliceLexer.advanceUntilAny', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.advanceUntilAny.html', attributes: ["nogc"]},
{name: 'std.experimental.xml.lexers.SliceLexer.CharacterType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/SliceLexer.CharacterType.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.dropWhile', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.dropWhile.html', attributes: ["nogc"]},
{name: 'std.experimental.xml.lexers.SliceLexer.empty', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.empty.html', attributes: ["const", "nogc", "auto"]},
{name: 'std.experimental.xml.lexers.SliceLexer.get', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.get.html', attributes: ["const", "nogc"]},
{name: 'std.experimental.xml.lexers.SliceLexer.InputType', kind: "aliasdeclaration", path: './std/experimental/xml/lexers/SliceLexer.InputType.html', attributes: []},
{name: 'std.experimental.xml.lexers.SliceLexer.setSource', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.setSource.html', attributes: ["nogc"]},
{name: 'std.experimental.xml.lexers.SliceLexer.start', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.start.html', attributes: ["nogc"]},
{name: 'std.experimental.xml.lexers.SliceLexer.testAndAdvance', kind: "functiondeclaration", path: './std/experimental/xml/lexers/SliceLexer.testAndAdvance.html', attributes: ["nogc"]},
{name: 'std.experimental.xml.parser', kind: "module", path: './std/experimental/xml/parser.html', attributes: []},
{name: 'std.experimental.xml.parser.parse', kind: "functiondeclaration", path: './std/experimental/xml/parser/parse.html', attributes: ["auto"]},
{name: 'std.experimental.xml.parser.Parser', kind: "structdeclaration", path: './std/experimental/xml/parser/Parser.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.empty', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.empty.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.front', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.front.html', attributes: ["auto"]},
{name: 'std.experimental.xml.parser.Parser.popFront', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.popFront.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.setSource', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.setSource.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.this', kind: "functiondeclaration", path: './std/experimental/xml/parser/Parser.this.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.XMLToken', kind: "structdeclaration", path: './std/experimental/xml/parser/Parser.XMLToken.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.XMLToken.content', kind: "variabledeclaration", path: './std/experimental/xml/parser/Parser.XMLToken.content.html', attributes: []},
{name: 'std.experimental.xml.parser.Parser.XMLToken.kind', kind: "variabledeclaration", path: './std/experimental/xml/parser/Parser.XMLToken.kind.html', attributes: []},
{name: 'std.experimental.xml.sax', kind: "module", path: './std/experimental/xml/sax.html', attributes: []},
{name: 'std.experimental.xml.validation', kind: "module", path: './std/experimental/xml/validation.html', attributes: []},
{name: 'std.experimental.appender', kind: "module", path: './std/experimental/appender.html', attributes: []},
{name: 'std.experimental.xml', kind: "module", path: './std/experimental/xml.html', attributes: []},
];
